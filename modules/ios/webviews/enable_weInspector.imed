{
    "Name": "webviews/enable_webInspector",
    "Description": "iOS Enable WebInspector",
    "Help": "Enable WebView debugging for all iOS apps. Before running the script, enable Web Inspector in Safari settings. Original script: https://codeshare.frida.re/@leolashkevych/ios-enable-webinspector/",
    "Code": " 
  {   
        console.log('\\n---------iOS Enable WebInspector by leolashkevych------------------');
        // iOS Enable WebInspector — safer variant

        if (ObjC.available) {
            // Resolve symbols and check them
            const cfReleasePtr = Module.findExportByName('CoreFoundation', 'CFRelease');
            if (cfReleasePtr === null) {
                throw new Error('CFRelease symbol not found (CoreFoundation)');
            }
            const CFRelease = new NativeFunction(cfReleasePtr, 'void', ['pointer']);

            // SecTaskCopyValueForEntitlement is in Security framework
            const secTaskPtr = Module.findExportByName('Security', 'SecTaskCopyValueForEntitlement');
            if (secTaskPtr === null) {
                throw new Error('SecTaskCopyValueForEntitlement symbol not found (Security)');
            }

            // Attach to SecTaskCopyValueForEntitlement
            Interceptor.attach(secTaskPtr, {
                onEnter: function (args) {
                    // args[1] is CFStringRef for entitlement name
                    // Avoid CFStringGetCStringPtr — convert to ObjC string directly
                    try {
                        // Convert CFStringRef / NSString to JS string using ObjC wrapper
                        var entitlementName = ObjC.Object(args[1]).toString();
                        // list of entitlements we care about
                        const entitlements = [
                            'com.apple.security.get-task-allow',
                            'com.apple.webinspector.allow',
                            'com.apple.private.webinspector.allow-remote-inspection',
                            'com.apple.private.webinspector.allow-carrier-remote-inspection'
                        ];

                        if (entitlements.indexOf(entitlementName) !== -1) {
                            this.shouldOverride = true;
                            this.entitlement = entitlementName;
                        }
                    } catch (e) {
                        // if we fail to convert, keep going but mark no override
                        this.shouldOverride = false;
                    }
                },

                onLeave: function (retVal) {
                    if (!this.shouldOverride) return;

                    console.log('[+] Overriding entitlement:', this.entitlement);

                    // If original return value is a CFTypeRef/ObjC object, release it
                    if (!retVal.isNull()) {
                        try {
                            // CFRelease expects a CFTypeRef as pointer
                            CFRelease(retVal);
                        } catch (e) {
                            // ignore release errors
                        }
                    }

                    // Build an NSNumber boolean true and replace the native return pointer
                    try {
                        var nsNumberTrue = ObjC.classes.NSNumber.numberWithBool_(1);
                        // nsNumberTrue.handle is the NativePointer to the ObjC object
                        retVal.replace(nsNumberTrue.handle);
                        console.log('[+] Replaced return with NSNumber(true) ->', nsNumberTrue);
                    } catch (e) {
                        console.error('[!] Failed to create/replace with NSNumber:', e);
                    }
                }
            });

            console.log('[*] SecTaskCopyValueForEntitlement hook installed.');
} else {
    console.error('ObjC.runtime is not available — are you targeting an iOS process?');
}



}

"
}





