{
    "Name": "helpers/android_net_uri",
    "Description": "Use this module to monitor Uri operations",
    "Help": "Logs various Uri operations including query parameters, parsing e.t.c.",    
    "Options": [
        {
            "name": "show_common",
            "help": "Set it to true in order to log common schemes (http/https e.t.c.). Default value = false",
            "type": "boolean",
            "value": "false"
        },
        {
            "name": "show_all_query_params",
            "help": "Set it to false in order to log only query parameters with specific keywords. Default value = true",
            "type": "boolean",
            "value": "true"
        }
    ],
    "Code": "
console.log('\\n----------URI parsing monitor by @ch0p1n------------');

{
  var Uri = Java.use('android.net.Uri'); 

  const commonSchemes = ['http', 'https', 'content', 'file', 'gmsg'];
  const __show_common__ = false; //set it to true to exclude the above shcemes from the logs 
  const __show_all_query_params__ = true;
  const avoidLog = ['gmsg']
  var currentUri = '';


  Uri.getQueryParameter.implementation = function(key)
  {
      var retval = this.getQueryParameter(key);
      if (currentUri == this.toString()){}
      else
      {
        currentUri = this.toString();
        if(!avoidLog.includes(currentUri.getScheme()))
          colorLog('[+] getQueryParameter for Uri: '+currentUri,{c: Color.Green})
      }

      if(filterKeyWords.some(word => key.toString().toLowerCase().includes(word)))
        colorLog('\t\\\\_key:'+key+', value:'+retval, {c: Color.Red});
      else
        if(__show_all_query_params__)
          console.log('\t\\\\_key:'+key+', value:'+retval);
      return retval;
  }

  Uri.getQueryParameters.implementation = function(key){
    var retval = this.getQueryParameters(key);
    if (currentUri == this.toString()){}
    else
    {
      currentUri = this.toString();
      if(!avoidLog.includes(currentUri.getScheme()))
        colorLog('[+] getQueryParameters for Uri: '+currentUri,{c: Color.Green})
    }
      if(filterKeyWords.some(word => key.toString().toLowerCase().includes(word)))
        colorLog('\t\\\\_key:'+key+', value:'+retval, {c: Color.Red});
      else
        console.log('\t\\\\_key:'+key+', value:'+retval);
      return retval;
  }


  Uri.parse.implementation = function(uriString){
    let ret = this.parse(uriString);
    let scheme = ret.getScheme();
    if(commonSchemes.includes(scheme) && __show_common__)
      log('[+] Uri parse with Uri String: '+uriString)
    else if(!commonSchemes.includes(scheme) && scheme != null)
      styleLog('[+] Uri with custom scheme: '+uriString,[uriString.split(':/')[0]].concat(filterKeyWords), StyleLogColorset.red, StyleLogColorset.black);

    return ret;
  }

  Uri.getAuthority.implementation = function(key){
    var ret = this.getAuthority();
    colorLog('[+] getAuthority for Uri: '+this,{c: Color.Green})
    console.log('\t\\_returns:'+ret);
    return ret;
  }

  Uri.getHost.implementation = function(key){
    var ret = this.getHost();
    colorLog('[+] getHost for Uri: '+this,{c: Color.Green})
    console.log('\t\\_returns:'+ret);
    return ret;
  }

  Uri.getScheme.implementation = function(key){
    var ret = this.getScheme();
    colorLog('[+] getScheme for Uri: '+this,{c: Color.Cyan})
    console.log('\t\\_returns:'+ret);
    return ret;
  }
}
"
}
